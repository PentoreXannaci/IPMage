name: Build and Deploy

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            framework: net8.0
            rid: linux-x64
          - os: windows-latest
            framework: net8.0
            rid: win-x64
          - os: macos-latest
            framework: net8.0
            rid: osx-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Install zip utility on Ubuntu or macOS
      if: matrix.os != 'windows-latest'
      run: |
        if ! command -v zip &> /dev/null; then
          if [ $RUNNER_OS == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y zip
          elif [ $RUNNER_OS == "macOS" ]; then
            brew install zip
          fi
        fi

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet publish IPMage.sln -c Release -r ${{ matrix.rid }} --self-contained

    - name: Create zip files
      run: |
        if [ $RUNNER_OS == "Linux" ]; then
          zip -r linux-x64-binary.zip ./binaries/linux-x64/
        elif [ $RUNNER_OS == "macOS" ]; then
          zip -r osx-x64-binary.zip ./binaries/osx-x64/
        elif [ $RUNNER_OS == "Windows" ]; then
          # No need to zip on Windows since it's the default build artifact
          echo "No zip creation for Windows"
        fi

    - name: Upload artifacts for Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64-binary
        path: linux-x64-binary.zip

    - name: Upload artifacts for Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: win-x64-binary
        path: '**/bin/Release/net8.0/win-x64/'

    - name: Upload artifacts for macOS
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: osx-x64-binary
        path: osx-x64-binary.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-x64-binary
        path: ./binaries/linux-x64/
    
    - name: Download Artifacts for Windows
      uses: actions/download-artifact@v4
      with:
        name: win-x64-binary
        path: ./binaries/win-x64/
    
    - name: Download Artifacts for macOS
      uses: actions/download-artifact@v4
      with:
        name: osx-x64-binary
        path: ./binaries/osx-x64/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-x64-binary.zip
        asset_name: linux-x64-binary.zip
        asset_content_type: application/zip

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./binaries/win-x64/
        asset_name: win-x64-binary.zip
        asset_content_type: application/zip

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./osx-x64-binary.zip
        asset_name: osx-x64-binary.zip
        asset_content_type: application/zip
